<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<context:property-placeholder location="classpath:config.properties,classpath:db.properties" file-encoding="utf-8" />

	<!--  1. DataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.pwd}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${pool.initialSize}" />
		<property name="minIdle" value="${pool.minIdle}" />
		<property name="maxActive" value="${pool.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${pool.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${db.validationQuery}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 ,注意：如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${db.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	
	<!-- 2. SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- MyBatis Config XML 路径（如果无需其他配置，可以省略） -->
	 	<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property> 
		<!-- 扫描类别名的包，省略 typeAliasesp 配置 -->
		<property name="typeAliasesPackage" value="cn.easyproject.easyee.sm,com.techhero.kkxfd"></property>
		<!-- 配置 Mapper XML 映射资源的路径，省略 mappers 配置（与MyBatis扫描映射文件一致）-->
		<property name="mapperLocations" value="classpath*:mybatis/mapper/**/*.xml"></property>
	</bean>
	
	<!--  3. TransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	<!-- 开启注解式事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"/> 
	
	<!-- 开启 Schema 式事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="add*"/>
			<tx:method name="save*"/>
			<tx:method name="new*"/>
			<tx:method name="create*"/>
			<tx:method name="del*"/>
			<tx:method name="remove*"/>
			<tx:method name="destory*"/>
			<tx:method name="update*"/>
			<tx:method name="edit*"/>
			<tx:method name="change*"/>
			<tx:method name="move*"/>
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP 将通知织入切点表达式指定的方法-->
	<aop:config>
		<!--  SYS 事务 AOP -->
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* cn.easyproject.easyee.sm.sys.service..*.*(..)) or execution(* com.techhero.kkxfd.**.service..*.*(..))" />
		<!-- 自定义模块事务配置.... -->
	</aop:config>
	
	<!-- MapperScannerConfigurer 指定自动扫描Mapper映射器的包 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.easyproject.easyee.**.dao,com.techhero.kkxfd.**.dao"/>
	</bean>
	
	<!-- 配置Jdbc模板  -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource" />

</beans>