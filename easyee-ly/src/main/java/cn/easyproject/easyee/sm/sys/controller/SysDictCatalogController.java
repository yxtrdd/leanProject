package cn.easyproject.easyee.sm.sys.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import cn.easyproject.easyee.sm.base.controller.BaseController;
import cn.easyproject.easyee.sm.base.service.BaseService;
import cn.easyproject.easyee.sm.sys.criteria.SysDictCatalogCriteria;
import cn.easyproject.easyee.sm.sys.entity.SysDictCatalog;
import cn.easyproject.easyee.sm.sys.service.SysDictCatalogService;

 /**
 * SysDictCatalog Controller, generated by EasyAuto
 *
 * 所有Controller处理类统一继承BaseController.
 * 
 * BaseController中定义了一下内容：
 * - request, application Servlet API 
 * - 请求响应相关的JSON参数（EasyUI框架请求都是通过JSON响应） 
 * - 初始化JSON响应数据的方法（setJsonMap，setJsonMsgMap，setJsonPaginationMap(PageBean, Object...)） 
 * - 获得分页对象：super.getPageBean() 
 * 
 * @author easyproject.cn
 * @version 1.0
 */
@RestController
@RequestMapping("SysDictCatalog")
public class SysDictCatalogController extends BaseController<SysDictCatalog, SysDictCatalogCriteria> {

	public static Logger logger = LoggerFactory.getLogger(SysDictCatalogController.class);
	
	@Resource
	private SysDictCatalogService sysDictCatalogService;
	
	 @Override
    public BaseService<SysDictCatalog> getService() {
        return sysDictCatalogService;
    }

	/**
	 * Forward to page
	 */
	@RequestMapping("page")
	public ModelAndView page(ModelAndView mv) {
		mv.setViewName("main/sys/SysDictCatalog");
		return mv;
	}
	
	/**
     * getChildTree:获取树的子节点.
     * @author gaojx
     * @param parentId
     * @return
     */
    @RequestMapping("getChildTree")
    public String getChildTree(String parentId) {
        List<Map<String, Object>> list = new ArrayList<>();
        SysDictCatalog parent = null;
        if (null != parentId && "0".equals(parentId)) {
            parent = new SysDictCatalog("0", "字典分类"); // 虚拟的区域根节点
        } else {
            parent = sysDictCatalogService.get(parentId); // 查询父级编码对象
        }
        if (null != parent) {
            // 查询下一级
            List<SysDictCatalog> children = sysDictCatalogService.getChildNext(parent);
            for (SysDictCatalog child : children) {
                Map<String, Object> node = new HashMap<>();
                node.put("id", child.getId());
                node.put("text", child.getCatalogName());
                node.put("parentId", child.getParentId());
                node.put("sortNum", child.getSortNum());
                node.put("remark", child.getRemark());
                
                int count = sysDictCatalogService.getChildCount(child);
                if (count > 0) {
                    node.put("state", "closed");
                } else {
                    node.put("state", "open");
                }
                node.put("iconCls", "icon-tree-group");
                list.add(node);
            }
        }
        return toJson(list);
    }
	
    /**
     * unique:验证分类名称唯一性.
     * @author gaojx  
     * @param catalogName 分类名称
     * @param id  
     * @return
     */
    @RequestMapping("unique")
    public String unique(String catalogName, String id) {
        SysDictCatalog sysDictCatalog = null;
        try {
            sysDictCatalog = sysDictCatalogService.get(catalogName);
            if (null != sysDictCatalog) {
                // 如果是自己则没有修改，返回true
                if(sysDictCatalog.getId().equals(id)){
                    return "true";
                }
                return "false";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "true";
    }
   
}
